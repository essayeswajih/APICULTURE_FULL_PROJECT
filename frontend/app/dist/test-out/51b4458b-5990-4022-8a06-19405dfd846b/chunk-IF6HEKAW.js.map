{
  "version": 3,
  "sources": ["src/environments/environments.ts", "src/app/services/api.ts"],
  "sourcesContent": ["export const environment = {\n  production: false,        // Set to `true` for production environment\n  apiUrl: 'http://localhost:8000',  // Your FastAPI backend URL during development\n};\n", "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environments';\n\nexport interface Category {\n  id: number;\n  name: string;\n  description?: string;\n}\n\nexport interface Product {\n  id: number;\n  name: string;\n  description?: string;\n  price: number;\n  stock_quantity: number;\n  category_id: number;\n  discounted_price?: number;\n}\n\nexport enum OrderStatus {\n  PENDING = 'pending',\n  PROCESSING = 'processing',\n  SHIPPED = 'shipped',\n  DELIVERED = 'delivered',\n}\n\nexport interface Order {\n  id: number;\n  user_id: number;\n  total_amount: number;\n  status: OrderStatus;\n  created_at: string;\n  items: { product_id: number; quantity: number; price: number }[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Api {\n  private apiUrl = environment.apiUrl; // Assuming you have the FastAPI URL here\n\n  constructor(private http: HttpClient) {}\n\n  // Helper to handle API errors\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side or network error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Backend returned an unsuccessful response code\n      errorMessage = `Error ${error.status}: ${error.message}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n\n  // Categories API\n  getCategories(): Observable<Category[]> {\n    return this.http\n      .get<Category[]>(`${this.apiUrl}/categories`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  addCategory(category: Category): Observable<Category> {\n    return this.http\n      .post<Category>(`${this.apiUrl}/categories`, category)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  updateCategory(id: number, category: Category): Observable<Category> {\n    return this.http\n      .put<Category>(`${this.apiUrl}/categories/${id}`, category)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  deleteCategory(id: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.apiUrl}/categories/${id}`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  // Products API\n  getProducts(): Observable<Product[]> {\n    return this.http\n      .get<Product[]>(`${this.apiUrl}/products`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  addProduct(product: Product): Observable<Product> {\n    return this.http\n      .post<Product>(`${this.apiUrl}/products`, product)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  updateProduct(id: number, product: Product): Observable<Product> {\n    return this.http\n      .put<Product>(`${this.apiUrl}/products/${id}`, product)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  deleteProduct(id: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.apiUrl}/products/${id}`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  // Orders API\n  getOrders(): Observable<Order[]> {\n    return this.http\n      .get<Order[]>(`${this.apiUrl}/orders`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  updateOrderStatus(id: number, status: OrderStatus): Observable<Order> {\n    return this.http\n      .put<Order>(`${this.apiUrl}/orders/${id}`, { status })\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  createOrder(order: Order): Observable<Order> {\n    return this.http\n      .post<Order>(`${this.apiUrl}/orders`, order)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  deleteOrder(id: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.apiUrl}/orders/${id}`)\n      .pipe(catchError(this.handleError)); // Error handling\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,IAAa;AAAb;;;AAAO,IAAM,cAAc;MACzB,YAAY;;MACZ,QAAQ;;;;;;;ICoBE,aAmBC;;;;;AAzCb;AACA;AACA;AACA;AACA;AAkBA,KAAA,SAAYA,cAAW;AACrB,MAAAA,aAAA,SAAA,IAAA;AACA,MAAAA,aAAA,YAAA,IAAA;AACA,MAAAA,aAAA,SAAA,IAAA;AACA,MAAAA,aAAA,WAAA,IAAA;IACF,GALY,gBAAA,cAAW,CAAA,EAAA;AAmBhB,IAAM,MAAN,MAAMC,KAAG;MAGM;MAFZ,SAAS,YAAY;;MAE7B,YAAoB,MAAgB;AAAhB,aAAA,OAAA;MAAmB;;MAG/B,YAAY,OAAwB;AAC1C,YAAI,eAAe;AACnB,YAAI,MAAM,iBAAiB,YAAY;AAErC,yBAAe,UAAU,MAAM,MAAM,OAAO;QAC9C,OAAO;AAEL,yBAAe,SAAS,MAAM,MAAM,KAAK,MAAM,OAAO;QACxD;AACA,eAAO,WAAW,MAAM,IAAI,MAAM,YAAY,CAAC;MACjD;;MAGA,gBAAa;AACX,eAAO,KAAK,KACT,IAAgB,GAAG,KAAK,MAAM,aAAa,EAC3C,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,YAAY,UAAkB;AAC5B,eAAO,KAAK,KACT,KAAe,GAAG,KAAK,MAAM,eAAe,QAAQ,EACpD,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,eAAe,IAAY,UAAkB;AAC3C,eAAO,KAAK,KACT,IAAc,GAAG,KAAK,MAAM,eAAe,EAAE,IAAI,QAAQ,EACzD,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,eAAe,IAAU;AACvB,eAAO,KAAK,KACT,OAAa,GAAG,KAAK,MAAM,eAAe,EAAE,EAAE,EAC9C,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;;MAGA,cAAW;AACT,eAAO,KAAK,KACT,IAAe,GAAG,KAAK,MAAM,WAAW,EACxC,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,WAAW,SAAgB;AACzB,eAAO,KAAK,KACT,KAAc,GAAG,KAAK,MAAM,aAAa,OAAO,EAChD,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,cAAc,IAAY,SAAgB;AACxC,eAAO,KAAK,KACT,IAAa,GAAG,KAAK,MAAM,aAAa,EAAE,IAAI,OAAO,EACrD,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,cAAc,IAAU;AACtB,eAAO,KAAK,KACT,OAAa,GAAG,KAAK,MAAM,aAAa,EAAE,EAAE,EAC5C,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;;MAGA,YAAS;AACP,eAAO,KAAK,KACT,IAAa,GAAG,KAAK,MAAM,SAAS,EACpC,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,kBAAkB,IAAY,QAAmB;AAC/C,eAAO,KAAK,KACT,IAAW,GAAG,KAAK,MAAM,WAAW,EAAE,IAAI,EAAE,OAAM,CAAE,EACpD,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,YAAY,OAAY;AACtB,eAAO,KAAK,KACT,KAAY,GAAG,KAAK,MAAM,WAAW,KAAK,EAC1C,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;MAEA,YAAY,IAAU;AACpB,eAAO,KAAK,KACT,OAAa,GAAG,KAAK,MAAM,WAAW,EAAE,EAAE,EAC1C,KAAK,WAAW,KAAK,WAAW,CAAC;MACtC;;;;;AA3FW,UAAG,WAAA;MAHf,WAAW;QACV,YAAY;OACb;OACY,GAAG;;;",
  "names": ["OrderStatus", "Api"]
}

{
  "version": 3,
  "sources": ["angular:jit:template:src/app/pages/product-management/product-management.html", "angular:jit:style:src/app/pages/product-management/product-management.scss", "src/app/pages/product-management/product-management.ts", "src/app/pages/product-management/product-management.spec.ts"],
  "sourcesContent": ["<div class=\"container py-5\">\n  <h2>Product Management</h2>\n  <div class=\"card mb-3\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">Add New Product</h5>\n      <form (ngSubmit)=\"addProduct()\">\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" [(ngModel)]=\"newProduct.name\" required>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"description\" class=\"form-label\">Description</label>\n          <textarea class=\"form-control\" id=\"description\" name=\"description\" [(ngModel)]=\"newProduct.description\"></textarea>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"price\" class=\"form-label\">Price</label>\n          <input type=\"number\" class=\"form-control\" id=\"price\" name=\"price\" [(ngModel)]=\"newProduct.price\" required>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"stock_quantity\" class=\"form-label\">Stock Quantity</label>\n          <input type=\"number\" class=\"form-control\" id=\"stock_quantity\" name=\"stock_quantity\" [(ngModel)]=\"newProduct.stock_quantity\" required>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"category_id\" class=\"form-label\">Category</label>\n          <select class=\"form-control\" id=\"category_id\" name=\"category_id\" [(ngModel)]=\"newProduct.category_id\" required>\n            @for (category of categories; track category.id) {\n              <option [value]=\"category.id\">{{ category.name }}</option>\n            }\n          </select>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"discounted_price\" class=\"form-label\">Discounted Price (Optional)</label>\n          <input type=\"number\" class=\"form-control\" id=\"discounted_price\" name=\"discounted_price\" [(ngModel)]=\"newProduct.discounted_price\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-warning\">{{ editMode ? 'Update' : 'Add' }} Product</button>\n        <button type=\"button\" class=\"btn btn-secondary ms-2\" *ngIf=\"editMode\" (click)=\"resetForm()\">Cancel</button>\n      </form>\n    </div>\n  </div>\n  <h3>Existing Products</h3>\n  <div class=\"row\">\n    @for (product of products; track product.id) {\n      <div class=\"col-md-4\">\n        <div class=\"card mb-3\">\n          <img src=\"https://via.placeholder.com/200?text=Product\" class=\"card-img-top\" alt=\"Product\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ product.name }}</h5>\n            <p class=\"card-text\">{{ product.description || 'No description' }}</p>\n            <p class=\"card-text\">Price: ${{ product.price | number:'1.2-2' }}</p>\n            <p class=\"card-text\">Stock: {{ product.stock_quantity }}</p>\n            <p class=\"card-text\">Category ID: {{ product.category_id }}</p>\n            <p class=\"card-text\">Discounted: ${{ product.discounted_price || 'N/A' }}</p>\n            <button class=\"btn btn-outline-warning me-2\" (click)=\"editProduct(product)\">Edit</button>\n            <button class=\"btn btn-danger\" (click)=\"deleteProduct(product.id)\">Delete</button>\n          </div>\n        </div>\n      </div>\n    }\n  </div>\n</div>", "/* src/app/pages/product-management/product-management.scss */\nbody {\n  background-color: #fff8e1;\n  font-family: \"Roboto\", sans-serif;\n}\n.hero {\n  background-color: rgba(255, 247, 216, 0.4941176471);\n}\nh2 {\n  color: #d97706;\n}\n.card-title {\n  color: #15803d;\n}\n.card-text {\n  color: #333;\n}\n.card-img-top {\n  height: 200px;\n  object-fit: cover;\n}\n.text-success {\n  color: #15803d !important;\n}\n.text-success:hover {\n  color: #14532d !important;\n}\n.btn-outline-warning {\n  border-color: #d97706;\n  color: #d97706;\n}\n.btn-outline-warning:hover {\n  background-color: #d97706;\n  color: #fff8e1;\n}\n.btn-warning {\n  background-color: #d97706;\n  border-color: #d97706;\n}\n.btn-warning:hover {\n  background-color: #14532d;\n  border-color: #14532d;\n  color: #fff8e1;\n}\n#beeBox,\n#beeBox1 {\n  position: absolute;\n  width: 95vw;\n  height: 100vh;\n  overflow: hidden;\n  z-index: 0;\n  top: 100px;\n}\n#beeBox {\n  left: 0;\n}\n#beeBox1 {\n  right: 0;\n}\n#bee,\n#bee1 {\n  width: 125px;\n  box-sizing: border-box;\n  will-change: transform;\n  position: absolute;\n}\n#bee1 {\n  right: 0;\n  top: 30vh;\n}\n/*# sourceMappingURL=product-management.css.map */\n", "// src/app/product-management/product-management.component.ts\nimport { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\nimport { Api, Product, Category } from '../../services/api';\nimport { gsap } from 'gsap';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'app-product-management',\n  imports: [FormsModule,CommonModule],\n  templateUrl: './product-management.html',\n  styleUrl: './product-management.scss'\n})\nexport class ProductManagement implements OnInit {\n  products: Product[] = [];\n  categories: Category[] = [];\n  newProduct: Product = { id: 0, name: '', description: '', price: 0, stock_quantity: 0, category_id: 0 };\n  editMode = false;\n  editProductId: number | null = null;\n\n  constructor(\n    private apiService: Api,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    this.loadProducts();\n    this.apiService.getCategories().subscribe(categories => {\n      this.categories = categories;\n    });\n  }\n\n  addProduct() {\n    if (this.editMode && this.editProductId) {\n      this.apiService.updateProduct(this.editProductId, this.newProduct).subscribe(() => {\n        this.resetForm();\n        this.loadProducts();\n      });\n    } else {\n      this.apiService.addProduct(this.newProduct).subscribe(() => {\n        this.resetForm();\n        this.loadProducts();\n      });\n    }\n  }\n\n  editProduct(product: Product) {\n    this.newProduct = { ...product };\n    this.editMode = true;\n    this.editProductId = product.id;\n  }\n\n  deleteProduct(id: number) {\n    this.apiService.deleteProduct(id).subscribe(() => this.loadProducts());\n  }\n\n  resetForm() {\n    this.newProduct = { id: 0, name: '', description: '', price: 0, stock_quantity: 0, category_id: 0 };\n    this.editMode = false;\n    this.editProductId = null;\n  }\n\n  trackById(index: number, product: Product): number {\n    return product.id;\n  }\n\n  private loadProducts() {\n    this.apiService.getProducts().subscribe(products => {\n      this.products = products;\n      if (isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          const cards = document.querySelectorAll('.card');\n          if (cards.length > 0) {\n            gsap.from(cards, { opacity: 0, y: 20, duration: 0.5, stagger: 0.2 });\n          }\n        }, 0);\n      }\n    });\n  }\n}", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { ProductManagement } from './product-management';\n\ndescribe('ProductManagement', () => {\n  let component: ProductManagement;\n  let fixture: ComponentFixture<ProductManagement>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [ProductManagement]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(ProductManagement);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": "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",
  "names": ["product_management_default", "init_product_management", "ProductManagement", "init_product_management"]
}
